
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Domains
 */

export type Domains = {
  domain: string
  hits: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model GuildConfigs
 */

export type GuildConfigs = {
  id: string
  delete: Level
  action: ActionKind
  logChannel: string | null
  muteRole: string | null
  notify: Level | null
  logLevel: Level | null
}

/**
 * Model Exemptions
 */

export type Exemptions = {
  id: string
  guildId: string
  kind: ExemptionKind
}

/**
 * Model Muted
 */

export type Muted = {
  id: string
  guildId: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Level: {
  ALWAYS: 'ALWAYS',
  YES: 'YES',
  NO: 'NO'
};

export type Level = (typeof Level)[keyof typeof Level]


export const ActionKind: {
  BAN: 'BAN',
  SOFTBAN: 'SOFTBAN',
  KICK: 'KICK',
  MUTE: 'MUTE',
  STICKYMUTE: 'STICKYMUTE',
  NONE: 'NONE'
};

export type ActionKind = (typeof ActionKind)[keyof typeof ActionKind]


export const ExemptionKind: {
  USER: 'USER',
  ROLE: 'ROLE',
  CHANNEL: 'CHANNEL'
};

export type ExemptionKind = (typeof ExemptionKind)[keyof typeof ExemptionKind]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Domains
 * const domains = await prisma.domains.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Domains
   * const domains = await prisma.domains.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.domains`: Exposes CRUD operations for the **Domains** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Domains
    * const domains = await prisma.domains.findMany()
    * ```
    */
  get domains(): Prisma.DomainsDelegate<GlobalReject>;

  /**
   * `prisma.guildConfigs`: Exposes CRUD operations for the **GuildConfigs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuildConfigs
    * const guildConfigs = await prisma.guildConfigs.findMany()
    * ```
    */
  get guildConfigs(): Prisma.GuildConfigsDelegate<GlobalReject>;

  /**
   * `prisma.exemptions`: Exposes CRUD operations for the **Exemptions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exemptions
    * const exemptions = await prisma.exemptions.findMany()
    * ```
    */
  get exemptions(): Prisma.ExemptionsDelegate<GlobalReject>;

  /**
   * `prisma.muted`: Exposes CRUD operations for the **Muted** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Muteds
    * const muteds = await prisma.muted.findMany()
    * ```
    */
  get muted(): Prisma.MutedDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.1.1
   * Query Engine version: c22652b7e418506fab23052d569b85d3aec4883f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Domains: 'Domains',
    GuildConfigs: 'GuildConfigs',
    Exemptions: 'Exemptions',
    Muted: 'Muted'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GuildConfigsCountOutputType
   */


  export type GuildConfigsCountOutputType = {
    exemptions: number
    muted: number
  }

  export type GuildConfigsCountOutputTypeSelect = {
    exemptions?: boolean
    muted?: boolean
  }

  export type GuildConfigsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GuildConfigsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GuildConfigsCountOutputType
    : S extends undefined
    ? never
    : S extends GuildConfigsCountOutputTypeArgs
    ?'include' extends U
    ? GuildConfigsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof GuildConfigsCountOutputType ?GuildConfigsCountOutputType [P]
  : 
     never
  } 
    : GuildConfigsCountOutputType
  : GuildConfigsCountOutputType




  // Custom InputTypes

  /**
   * GuildConfigsCountOutputType without action
   */
  export type GuildConfigsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigsCountOutputType
     * 
    **/
    select?: GuildConfigsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Domains
   */


  export type AggregateDomains = {
    _count: DomainsCountAggregateOutputType | null
    _avg: DomainsAvgAggregateOutputType | null
    _sum: DomainsSumAggregateOutputType | null
    _min: DomainsMinAggregateOutputType | null
    _max: DomainsMaxAggregateOutputType | null
  }

  export type DomainsAvgAggregateOutputType = {
    hits: number | null
  }

  export type DomainsSumAggregateOutputType = {
    hits: number | null
  }

  export type DomainsMinAggregateOutputType = {
    domain: string | null
    hits: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DomainsMaxAggregateOutputType = {
    domain: string | null
    hits: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DomainsCountAggregateOutputType = {
    domain: number
    hits: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DomainsAvgAggregateInputType = {
    hits?: true
  }

  export type DomainsSumAggregateInputType = {
    hits?: true
  }

  export type DomainsMinAggregateInputType = {
    domain?: true
    hits?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DomainsMaxAggregateInputType = {
    domain?: true
    hits?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DomainsCountAggregateInputType = {
    domain?: true
    hits?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DomainsAggregateArgs = {
    /**
     * Filter which Domains to aggregate.
     * 
    **/
    where?: DomainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     * 
    **/
    orderBy?: Enumerable<DomainsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DomainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Domains
    **/
    _count?: true | DomainsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DomainsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DomainsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DomainsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DomainsMaxAggregateInputType
  }

  export type GetDomainsAggregateType<T extends DomainsAggregateArgs> = {
        [P in keyof T & keyof AggregateDomains]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDomains[P]>
      : GetScalarType<T[P], AggregateDomains[P]>
  }


    
    
  export type DomainsGroupByArgs = {
    where?: DomainsWhereInput
    orderBy?: Enumerable<DomainsOrderByWithAggregationInput>
    by: Array<DomainsScalarFieldEnum>
    having?: DomainsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DomainsCountAggregateInputType | true
    _avg?: DomainsAvgAggregateInputType
    _sum?: DomainsSumAggregateInputType
    _min?: DomainsMinAggregateInputType
    _max?: DomainsMaxAggregateInputType
  }


  export type DomainsGroupByOutputType = {
    domain: string
    hits: number
    createdAt: Date
    updatedAt: Date
    _count: DomainsCountAggregateOutputType | null
    _avg: DomainsAvgAggregateOutputType | null
    _sum: DomainsSumAggregateOutputType | null
    _min: DomainsMinAggregateOutputType | null
    _max: DomainsMaxAggregateOutputType | null
  }

  type GetDomainsGroupByPayload<T extends DomainsGroupByArgs> = Promise<
    Array<
      PickArray<DomainsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DomainsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DomainsGroupByOutputType[P]> 
            : GetScalarType<T[P], DomainsGroupByOutputType[P]>
        }
      > 
    >


  export type DomainsSelect = {
    domain?: boolean
    hits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DomainsGetPayload<
    S extends boolean | null | undefined | DomainsArgs,
    U = keyof S
      > = S extends true
        ? Domains
    : S extends undefined
    ? never
    : S extends DomainsArgs | DomainsFindManyArgs
    ?'include' extends U
    ? Domains 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Domains ?Domains [P]
  : 
     never
  } 
    : Domains
  : Domains


  type DomainsCountArgs = Merge<
    Omit<DomainsFindManyArgs, 'select' | 'include'> & {
      select?: DomainsCountAggregateInputType | true
    }
  >

  export interface DomainsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Domains that matches the filter.
     * @param {DomainsFindUniqueArgs} args - Arguments to find a Domains
     * @example
     * // Get one Domains
     * const domains = await prisma.domains.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DomainsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DomainsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Domains'> extends True ? CheckSelect<T, Prisma__DomainsClient<Domains>, Prisma__DomainsClient<DomainsGetPayload<T>>> : CheckSelect<T, Prisma__DomainsClient<Domains | null >, Prisma__DomainsClient<DomainsGetPayload<T> | null >>

    /**
     * Find the first Domains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainsFindFirstArgs} args - Arguments to find a Domains
     * @example
     * // Get one Domains
     * const domains = await prisma.domains.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DomainsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DomainsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Domains'> extends True ? CheckSelect<T, Prisma__DomainsClient<Domains>, Prisma__DomainsClient<DomainsGetPayload<T>>> : CheckSelect<T, Prisma__DomainsClient<Domains | null >, Prisma__DomainsClient<DomainsGetPayload<T> | null >>

    /**
     * Find zero or more Domains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Domains
     * const domains = await prisma.domains.findMany()
     * 
     * // Get first 10 Domains
     * const domains = await prisma.domains.findMany({ take: 10 })
     * 
     * // Only select the `domain`
     * const domainsWithDomainOnly = await prisma.domains.findMany({ select: { domain: true } })
     * 
    **/
    findMany<T extends DomainsFindManyArgs>(
      args?: SelectSubset<T, DomainsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Domains>>, PrismaPromise<Array<DomainsGetPayload<T>>>>

    /**
     * Create a Domains.
     * @param {DomainsCreateArgs} args - Arguments to create a Domains.
     * @example
     * // Create one Domains
     * const Domains = await prisma.domains.create({
     *   data: {
     *     // ... data to create a Domains
     *   }
     * })
     * 
    **/
    create<T extends DomainsCreateArgs>(
      args: SelectSubset<T, DomainsCreateArgs>
    ): CheckSelect<T, Prisma__DomainsClient<Domains>, Prisma__DomainsClient<DomainsGetPayload<T>>>

    /**
     * Create many Domains.
     *     @param {DomainsCreateManyArgs} args - Arguments to create many Domains.
     *     @example
     *     // Create many Domains
     *     const domains = await prisma.domains.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DomainsCreateManyArgs>(
      args?: SelectSubset<T, DomainsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Domains.
     * @param {DomainsDeleteArgs} args - Arguments to delete one Domains.
     * @example
     * // Delete one Domains
     * const Domains = await prisma.domains.delete({
     *   where: {
     *     // ... filter to delete one Domains
     *   }
     * })
     * 
    **/
    delete<T extends DomainsDeleteArgs>(
      args: SelectSubset<T, DomainsDeleteArgs>
    ): CheckSelect<T, Prisma__DomainsClient<Domains>, Prisma__DomainsClient<DomainsGetPayload<T>>>

    /**
     * Update one Domains.
     * @param {DomainsUpdateArgs} args - Arguments to update one Domains.
     * @example
     * // Update one Domains
     * const domains = await prisma.domains.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DomainsUpdateArgs>(
      args: SelectSubset<T, DomainsUpdateArgs>
    ): CheckSelect<T, Prisma__DomainsClient<Domains>, Prisma__DomainsClient<DomainsGetPayload<T>>>

    /**
     * Delete zero or more Domains.
     * @param {DomainsDeleteManyArgs} args - Arguments to filter Domains to delete.
     * @example
     * // Delete a few Domains
     * const { count } = await prisma.domains.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DomainsDeleteManyArgs>(
      args?: SelectSubset<T, DomainsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Domains
     * const domains = await prisma.domains.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DomainsUpdateManyArgs>(
      args: SelectSubset<T, DomainsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Domains.
     * @param {DomainsUpsertArgs} args - Arguments to update or create a Domains.
     * @example
     * // Update or create a Domains
     * const domains = await prisma.domains.upsert({
     *   create: {
     *     // ... data to create a Domains
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Domains we want to update
     *   }
     * })
    **/
    upsert<T extends DomainsUpsertArgs>(
      args: SelectSubset<T, DomainsUpsertArgs>
    ): CheckSelect<T, Prisma__DomainsClient<Domains>, Prisma__DomainsClient<DomainsGetPayload<T>>>

    /**
     * Count the number of Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainsCountArgs} args - Arguments to filter Domains to count.
     * @example
     * // Count the number of Domains
     * const count = await prisma.domains.count({
     *   where: {
     *     // ... the filter for the Domains we want to count
     *   }
     * })
    **/
    count<T extends DomainsCountArgs>(
      args?: Subset<T, DomainsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DomainsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DomainsAggregateArgs>(args: Subset<T, DomainsAggregateArgs>): PrismaPromise<GetDomainsAggregateType<T>>

    /**
     * Group by Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DomainsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DomainsGroupByArgs['orderBy'] }
        : { orderBy?: DomainsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DomainsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDomainsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Domains.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DomainsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Domains findUnique
   */
  export type DomainsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
    /**
     * Throw an Error if a Domains can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Domains to fetch.
     * 
    **/
    where: DomainsWhereUniqueInput
  }


  /**
   * Domains findFirst
   */
  export type DomainsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
    /**
     * Throw an Error if a Domains can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Domains to fetch.
     * 
    **/
    where?: DomainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     * 
    **/
    orderBy?: Enumerable<DomainsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domains.
     * 
    **/
    cursor?: DomainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domains.
     * 
    **/
    distinct?: Enumerable<DomainsScalarFieldEnum>
  }


  /**
   * Domains findMany
   */
  export type DomainsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
    /**
     * Filter, which Domains to fetch.
     * 
    **/
    where?: DomainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     * 
    **/
    orderBy?: Enumerable<DomainsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Domains.
     * 
    **/
    cursor?: DomainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DomainsScalarFieldEnum>
  }


  /**
   * Domains create
   */
  export type DomainsCreateArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
    /**
     * The data needed to create a Domains.
     * 
    **/
    data: XOR<DomainsCreateInput, DomainsUncheckedCreateInput>
  }


  /**
   * Domains createMany
   */
  export type DomainsCreateManyArgs = {
    data: Enumerable<DomainsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Domains update
   */
  export type DomainsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
    /**
     * The data needed to update a Domains.
     * 
    **/
    data: XOR<DomainsUpdateInput, DomainsUncheckedUpdateInput>
    /**
     * Choose, which Domains to update.
     * 
    **/
    where: DomainsWhereUniqueInput
  }


  /**
   * Domains updateMany
   */
  export type DomainsUpdateManyArgs = {
    data: XOR<DomainsUpdateManyMutationInput, DomainsUncheckedUpdateManyInput>
    where?: DomainsWhereInput
  }


  /**
   * Domains upsert
   */
  export type DomainsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
    /**
     * The filter to search for the Domains to update in case it exists.
     * 
    **/
    where: DomainsWhereUniqueInput
    /**
     * In case the Domains found by the `where` argument doesn't exist, create a new Domains with this data.
     * 
    **/
    create: XOR<DomainsCreateInput, DomainsUncheckedCreateInput>
    /**
     * In case the Domains was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DomainsUpdateInput, DomainsUncheckedUpdateInput>
  }


  /**
   * Domains delete
   */
  export type DomainsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
    /**
     * Filter which Domains to delete.
     * 
    **/
    where: DomainsWhereUniqueInput
  }


  /**
   * Domains deleteMany
   */
  export type DomainsDeleteManyArgs = {
    where?: DomainsWhereInput
  }


  /**
   * Domains without action
   */
  export type DomainsArgs = {
    /**
     * Select specific fields to fetch from the Domains
     * 
    **/
    select?: DomainsSelect | null
  }



  /**
   * Model GuildConfigs
   */


  export type AggregateGuildConfigs = {
    _count: GuildConfigsCountAggregateOutputType | null
    _min: GuildConfigsMinAggregateOutputType | null
    _max: GuildConfigsMaxAggregateOutputType | null
  }

  export type GuildConfigsMinAggregateOutputType = {
    id: string | null
    delete: Level | null
    action: ActionKind | null
    logChannel: string | null
    muteRole: string | null
    notify: Level | null
    logLevel: Level | null
  }

  export type GuildConfigsMaxAggregateOutputType = {
    id: string | null
    delete: Level | null
    action: ActionKind | null
    logChannel: string | null
    muteRole: string | null
    notify: Level | null
    logLevel: Level | null
  }

  export type GuildConfigsCountAggregateOutputType = {
    id: number
    delete: number
    action: number
    logChannel: number
    muteRole: number
    notify: number
    logLevel: number
    _all: number
  }


  export type GuildConfigsMinAggregateInputType = {
    id?: true
    delete?: true
    action?: true
    logChannel?: true
    muteRole?: true
    notify?: true
    logLevel?: true
  }

  export type GuildConfigsMaxAggregateInputType = {
    id?: true
    delete?: true
    action?: true
    logChannel?: true
    muteRole?: true
    notify?: true
    logLevel?: true
  }

  export type GuildConfigsCountAggregateInputType = {
    id?: true
    delete?: true
    action?: true
    logChannel?: true
    muteRole?: true
    notify?: true
    logLevel?: true
    _all?: true
  }

  export type GuildConfigsAggregateArgs = {
    /**
     * Filter which GuildConfigs to aggregate.
     * 
    **/
    where?: GuildConfigsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildConfigs to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildConfigsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GuildConfigsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildConfigs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildConfigs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GuildConfigs
    **/
    _count?: true | GuildConfigsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildConfigsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildConfigsMaxAggregateInputType
  }

  export type GetGuildConfigsAggregateType<T extends GuildConfigsAggregateArgs> = {
        [P in keyof T & keyof AggregateGuildConfigs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuildConfigs[P]>
      : GetScalarType<T[P], AggregateGuildConfigs[P]>
  }


    
    
  export type GuildConfigsGroupByArgs = {
    where?: GuildConfigsWhereInput
    orderBy?: Enumerable<GuildConfigsOrderByWithAggregationInput>
    by: Array<GuildConfigsScalarFieldEnum>
    having?: GuildConfigsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildConfigsCountAggregateInputType | true
    _min?: GuildConfigsMinAggregateInputType
    _max?: GuildConfigsMaxAggregateInputType
  }


  export type GuildConfigsGroupByOutputType = {
    id: string
    delete: Level
    action: ActionKind
    logChannel: string | null
    muteRole: string | null
    notify: Level | null
    logLevel: Level | null
    _count: GuildConfigsCountAggregateOutputType | null
    _min: GuildConfigsMinAggregateOutputType | null
    _max: GuildConfigsMaxAggregateOutputType | null
  }

  type GetGuildConfigsGroupByPayload<T extends GuildConfigsGroupByArgs> = Promise<
    Array<
      PickArray<GuildConfigsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof GuildConfigsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], GuildConfigsGroupByOutputType[P]> 
            : GetScalarType<T[P], GuildConfigsGroupByOutputType[P]>
        }
      > 
    >


  export type GuildConfigsSelect = {
    id?: boolean
    delete?: boolean
    action?: boolean
    logChannel?: boolean
    muteRole?: boolean
    notify?: boolean
    logLevel?: boolean
    exemptions?: boolean | ExemptionsFindManyArgs
    muted?: boolean | MutedFindManyArgs
    _count?: boolean | GuildConfigsCountOutputTypeArgs
  }

  export type GuildConfigsInclude = {
    exemptions?: boolean | ExemptionsFindManyArgs
    muted?: boolean | MutedFindManyArgs
    _count?: boolean | GuildConfigsCountOutputTypeArgs
  }

  export type GuildConfigsGetPayload<
    S extends boolean | null | undefined | GuildConfigsArgs,
    U = keyof S
      > = S extends true
        ? GuildConfigs
    : S extends undefined
    ? never
    : S extends GuildConfigsArgs | GuildConfigsFindManyArgs
    ?'include' extends U
    ? GuildConfigs  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'exemptions'
        ? Array < ExemptionsGetPayload<S['include'][P]>>  :
        P extends 'muted'
        ? Array < MutedGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? GuildConfigsCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof GuildConfigs ?GuildConfigs [P]
  : 
          P extends 'exemptions'
        ? Array < ExemptionsGetPayload<S['select'][P]>>  :
        P extends 'muted'
        ? Array < MutedGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? GuildConfigsCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : GuildConfigs
  : GuildConfigs


  type GuildConfigsCountArgs = Merge<
    Omit<GuildConfigsFindManyArgs, 'select' | 'include'> & {
      select?: GuildConfigsCountAggregateInputType | true
    }
  >

  export interface GuildConfigsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one GuildConfigs that matches the filter.
     * @param {GuildConfigsFindUniqueArgs} args - Arguments to find a GuildConfigs
     * @example
     * // Get one GuildConfigs
     * const guildConfigs = await prisma.guildConfigs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuildConfigsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GuildConfigsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GuildConfigs'> extends True ? CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs>, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T>>> : CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs | null >, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T> | null >>

    /**
     * Find the first GuildConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigsFindFirstArgs} args - Arguments to find a GuildConfigs
     * @example
     * // Get one GuildConfigs
     * const guildConfigs = await prisma.guildConfigs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuildConfigsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GuildConfigsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GuildConfigs'> extends True ? CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs>, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T>>> : CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs | null >, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T> | null >>

    /**
     * Find zero or more GuildConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuildConfigs
     * const guildConfigs = await prisma.guildConfigs.findMany()
     * 
     * // Get first 10 GuildConfigs
     * const guildConfigs = await prisma.guildConfigs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guildConfigsWithIdOnly = await prisma.guildConfigs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuildConfigsFindManyArgs>(
      args?: SelectSubset<T, GuildConfigsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GuildConfigs>>, PrismaPromise<Array<GuildConfigsGetPayload<T>>>>

    /**
     * Create a GuildConfigs.
     * @param {GuildConfigsCreateArgs} args - Arguments to create a GuildConfigs.
     * @example
     * // Create one GuildConfigs
     * const GuildConfigs = await prisma.guildConfigs.create({
     *   data: {
     *     // ... data to create a GuildConfigs
     *   }
     * })
     * 
    **/
    create<T extends GuildConfigsCreateArgs>(
      args: SelectSubset<T, GuildConfigsCreateArgs>
    ): CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs>, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T>>>

    /**
     * Create many GuildConfigs.
     *     @param {GuildConfigsCreateManyArgs} args - Arguments to create many GuildConfigs.
     *     @example
     *     // Create many GuildConfigs
     *     const guildConfigs = await prisma.guildConfigs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuildConfigsCreateManyArgs>(
      args?: SelectSubset<T, GuildConfigsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GuildConfigs.
     * @param {GuildConfigsDeleteArgs} args - Arguments to delete one GuildConfigs.
     * @example
     * // Delete one GuildConfigs
     * const GuildConfigs = await prisma.guildConfigs.delete({
     *   where: {
     *     // ... filter to delete one GuildConfigs
     *   }
     * })
     * 
    **/
    delete<T extends GuildConfigsDeleteArgs>(
      args: SelectSubset<T, GuildConfigsDeleteArgs>
    ): CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs>, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T>>>

    /**
     * Update one GuildConfigs.
     * @param {GuildConfigsUpdateArgs} args - Arguments to update one GuildConfigs.
     * @example
     * // Update one GuildConfigs
     * const guildConfigs = await prisma.guildConfigs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuildConfigsUpdateArgs>(
      args: SelectSubset<T, GuildConfigsUpdateArgs>
    ): CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs>, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T>>>

    /**
     * Delete zero or more GuildConfigs.
     * @param {GuildConfigsDeleteManyArgs} args - Arguments to filter GuildConfigs to delete.
     * @example
     * // Delete a few GuildConfigs
     * const { count } = await prisma.guildConfigs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuildConfigsDeleteManyArgs>(
      args?: SelectSubset<T, GuildConfigsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuildConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuildConfigs
     * const guildConfigs = await prisma.guildConfigs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuildConfigsUpdateManyArgs>(
      args: SelectSubset<T, GuildConfigsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GuildConfigs.
     * @param {GuildConfigsUpsertArgs} args - Arguments to update or create a GuildConfigs.
     * @example
     * // Update or create a GuildConfigs
     * const guildConfigs = await prisma.guildConfigs.upsert({
     *   create: {
     *     // ... data to create a GuildConfigs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuildConfigs we want to update
     *   }
     * })
    **/
    upsert<T extends GuildConfigsUpsertArgs>(
      args: SelectSubset<T, GuildConfigsUpsertArgs>
    ): CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs>, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T>>>

    /**
     * Count the number of GuildConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigsCountArgs} args - Arguments to filter GuildConfigs to count.
     * @example
     * // Count the number of GuildConfigs
     * const count = await prisma.guildConfigs.count({
     *   where: {
     *     // ... the filter for the GuildConfigs we want to count
     *   }
     * })
    **/
    count<T extends GuildConfigsCountArgs>(
      args?: Subset<T, GuildConfigsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildConfigsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuildConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildConfigsAggregateArgs>(args: Subset<T, GuildConfigsAggregateArgs>): PrismaPromise<GetGuildConfigsAggregateType<T>>

    /**
     * Group by GuildConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildConfigsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildConfigsGroupByArgs['orderBy'] }
        : { orderBy?: GuildConfigsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildConfigsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildConfigsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for GuildConfigs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GuildConfigsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    exemptions<T extends ExemptionsFindManyArgs = {}>(args?: Subset<T, ExemptionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Exemptions>>, PrismaPromise<Array<ExemptionsGetPayload<T>>>>;

    muted<T extends MutedFindManyArgs = {}>(args?: Subset<T, MutedFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Muted>>, PrismaPromise<Array<MutedGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * GuildConfigs findUnique
   */
  export type GuildConfigsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
    /**
     * Throw an Error if a GuildConfigs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GuildConfigs to fetch.
     * 
    **/
    where: GuildConfigsWhereUniqueInput
  }


  /**
   * GuildConfigs findFirst
   */
  export type GuildConfigsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
    /**
     * Throw an Error if a GuildConfigs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GuildConfigs to fetch.
     * 
    **/
    where?: GuildConfigsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildConfigs to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildConfigsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildConfigs.
     * 
    **/
    cursor?: GuildConfigsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildConfigs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildConfigs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildConfigs.
     * 
    **/
    distinct?: Enumerable<GuildConfigsScalarFieldEnum>
  }


  /**
   * GuildConfigs findMany
   */
  export type GuildConfigsFindManyArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
    /**
     * Filter, which GuildConfigs to fetch.
     * 
    **/
    where?: GuildConfigsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildConfigs to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildConfigsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GuildConfigs.
     * 
    **/
    cursor?: GuildConfigsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildConfigs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildConfigs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GuildConfigsScalarFieldEnum>
  }


  /**
   * GuildConfigs create
   */
  export type GuildConfigsCreateArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
    /**
     * The data needed to create a GuildConfigs.
     * 
    **/
    data: XOR<GuildConfigsCreateInput, GuildConfigsUncheckedCreateInput>
  }


  /**
   * GuildConfigs createMany
   */
  export type GuildConfigsCreateManyArgs = {
    data: Enumerable<GuildConfigsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GuildConfigs update
   */
  export type GuildConfigsUpdateArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
    /**
     * The data needed to update a GuildConfigs.
     * 
    **/
    data: XOR<GuildConfigsUpdateInput, GuildConfigsUncheckedUpdateInput>
    /**
     * Choose, which GuildConfigs to update.
     * 
    **/
    where: GuildConfigsWhereUniqueInput
  }


  /**
   * GuildConfigs updateMany
   */
  export type GuildConfigsUpdateManyArgs = {
    data: XOR<GuildConfigsUpdateManyMutationInput, GuildConfigsUncheckedUpdateManyInput>
    where?: GuildConfigsWhereInput
  }


  /**
   * GuildConfigs upsert
   */
  export type GuildConfigsUpsertArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
    /**
     * The filter to search for the GuildConfigs to update in case it exists.
     * 
    **/
    where: GuildConfigsWhereUniqueInput
    /**
     * In case the GuildConfigs found by the `where` argument doesn't exist, create a new GuildConfigs with this data.
     * 
    **/
    create: XOR<GuildConfigsCreateInput, GuildConfigsUncheckedCreateInput>
    /**
     * In case the GuildConfigs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GuildConfigsUpdateInput, GuildConfigsUncheckedUpdateInput>
  }


  /**
   * GuildConfigs delete
   */
  export type GuildConfigsDeleteArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
    /**
     * Filter which GuildConfigs to delete.
     * 
    **/
    where: GuildConfigsWhereUniqueInput
  }


  /**
   * GuildConfigs deleteMany
   */
  export type GuildConfigsDeleteManyArgs = {
    where?: GuildConfigsWhereInput
  }


  /**
   * GuildConfigs without action
   */
  export type GuildConfigsArgs = {
    /**
     * Select specific fields to fetch from the GuildConfigs
     * 
    **/
    select?: GuildConfigsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildConfigsInclude | null
  }



  /**
   * Model Exemptions
   */


  export type AggregateExemptions = {
    _count: ExemptionsCountAggregateOutputType | null
    _min: ExemptionsMinAggregateOutputType | null
    _max: ExemptionsMaxAggregateOutputType | null
  }

  export type ExemptionsMinAggregateOutputType = {
    id: string | null
    guildId: string | null
    kind: ExemptionKind | null
  }

  export type ExemptionsMaxAggregateOutputType = {
    id: string | null
    guildId: string | null
    kind: ExemptionKind | null
  }

  export type ExemptionsCountAggregateOutputType = {
    id: number
    guildId: number
    kind: number
    _all: number
  }


  export type ExemptionsMinAggregateInputType = {
    id?: true
    guildId?: true
    kind?: true
  }

  export type ExemptionsMaxAggregateInputType = {
    id?: true
    guildId?: true
    kind?: true
  }

  export type ExemptionsCountAggregateInputType = {
    id?: true
    guildId?: true
    kind?: true
    _all?: true
  }

  export type ExemptionsAggregateArgs = {
    /**
     * Filter which Exemptions to aggregate.
     * 
    **/
    where?: ExemptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exemptions to fetch.
     * 
    **/
    orderBy?: Enumerable<ExemptionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ExemptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exemptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exemptions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exemptions
    **/
    _count?: true | ExemptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExemptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExemptionsMaxAggregateInputType
  }

  export type GetExemptionsAggregateType<T extends ExemptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateExemptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExemptions[P]>
      : GetScalarType<T[P], AggregateExemptions[P]>
  }


    
    
  export type ExemptionsGroupByArgs = {
    where?: ExemptionsWhereInput
    orderBy?: Enumerable<ExemptionsOrderByWithAggregationInput>
    by: Array<ExemptionsScalarFieldEnum>
    having?: ExemptionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExemptionsCountAggregateInputType | true
    _min?: ExemptionsMinAggregateInputType
    _max?: ExemptionsMaxAggregateInputType
  }


  export type ExemptionsGroupByOutputType = {
    id: string
    guildId: string
    kind: ExemptionKind
    _count: ExemptionsCountAggregateOutputType | null
    _min: ExemptionsMinAggregateOutputType | null
    _max: ExemptionsMaxAggregateOutputType | null
  }

  type GetExemptionsGroupByPayload<T extends ExemptionsGroupByArgs> = Promise<
    Array<
      PickArray<ExemptionsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ExemptionsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ExemptionsGroupByOutputType[P]> 
            : GetScalarType<T[P], ExemptionsGroupByOutputType[P]>
        }
      > 
    >


  export type ExemptionsSelect = {
    id?: boolean
    guildId?: boolean
    kind?: boolean
    guild?: boolean | GuildConfigsArgs
  }

  export type ExemptionsInclude = {
    guild?: boolean | GuildConfigsArgs
  }

  export type ExemptionsGetPayload<
    S extends boolean | null | undefined | ExemptionsArgs,
    U = keyof S
      > = S extends true
        ? Exemptions
    : S extends undefined
    ? never
    : S extends ExemptionsArgs | ExemptionsFindManyArgs
    ?'include' extends U
    ? Exemptions  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'guild'
        ? GuildConfigsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Exemptions ?Exemptions [P]
  : 
          P extends 'guild'
        ? GuildConfigsGetPayload<S['select'][P]> : never
  } 
    : Exemptions
  : Exemptions


  type ExemptionsCountArgs = Merge<
    Omit<ExemptionsFindManyArgs, 'select' | 'include'> & {
      select?: ExemptionsCountAggregateInputType | true
    }
  >

  export interface ExemptionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Exemptions that matches the filter.
     * @param {ExemptionsFindUniqueArgs} args - Arguments to find a Exemptions
     * @example
     * // Get one Exemptions
     * const exemptions = await prisma.exemptions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExemptionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExemptionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Exemptions'> extends True ? CheckSelect<T, Prisma__ExemptionsClient<Exemptions>, Prisma__ExemptionsClient<ExemptionsGetPayload<T>>> : CheckSelect<T, Prisma__ExemptionsClient<Exemptions | null >, Prisma__ExemptionsClient<ExemptionsGetPayload<T> | null >>

    /**
     * Find the first Exemptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExemptionsFindFirstArgs} args - Arguments to find a Exemptions
     * @example
     * // Get one Exemptions
     * const exemptions = await prisma.exemptions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExemptionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExemptionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Exemptions'> extends True ? CheckSelect<T, Prisma__ExemptionsClient<Exemptions>, Prisma__ExemptionsClient<ExemptionsGetPayload<T>>> : CheckSelect<T, Prisma__ExemptionsClient<Exemptions | null >, Prisma__ExemptionsClient<ExemptionsGetPayload<T> | null >>

    /**
     * Find zero or more Exemptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExemptionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exemptions
     * const exemptions = await prisma.exemptions.findMany()
     * 
     * // Get first 10 Exemptions
     * const exemptions = await prisma.exemptions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exemptionsWithIdOnly = await prisma.exemptions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExemptionsFindManyArgs>(
      args?: SelectSubset<T, ExemptionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Exemptions>>, PrismaPromise<Array<ExemptionsGetPayload<T>>>>

    /**
     * Create a Exemptions.
     * @param {ExemptionsCreateArgs} args - Arguments to create a Exemptions.
     * @example
     * // Create one Exemptions
     * const Exemptions = await prisma.exemptions.create({
     *   data: {
     *     // ... data to create a Exemptions
     *   }
     * })
     * 
    **/
    create<T extends ExemptionsCreateArgs>(
      args: SelectSubset<T, ExemptionsCreateArgs>
    ): CheckSelect<T, Prisma__ExemptionsClient<Exemptions>, Prisma__ExemptionsClient<ExemptionsGetPayload<T>>>

    /**
     * Create many Exemptions.
     *     @param {ExemptionsCreateManyArgs} args - Arguments to create many Exemptions.
     *     @example
     *     // Create many Exemptions
     *     const exemptions = await prisma.exemptions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExemptionsCreateManyArgs>(
      args?: SelectSubset<T, ExemptionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Exemptions.
     * @param {ExemptionsDeleteArgs} args - Arguments to delete one Exemptions.
     * @example
     * // Delete one Exemptions
     * const Exemptions = await prisma.exemptions.delete({
     *   where: {
     *     // ... filter to delete one Exemptions
     *   }
     * })
     * 
    **/
    delete<T extends ExemptionsDeleteArgs>(
      args: SelectSubset<T, ExemptionsDeleteArgs>
    ): CheckSelect<T, Prisma__ExemptionsClient<Exemptions>, Prisma__ExemptionsClient<ExemptionsGetPayload<T>>>

    /**
     * Update one Exemptions.
     * @param {ExemptionsUpdateArgs} args - Arguments to update one Exemptions.
     * @example
     * // Update one Exemptions
     * const exemptions = await prisma.exemptions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExemptionsUpdateArgs>(
      args: SelectSubset<T, ExemptionsUpdateArgs>
    ): CheckSelect<T, Prisma__ExemptionsClient<Exemptions>, Prisma__ExemptionsClient<ExemptionsGetPayload<T>>>

    /**
     * Delete zero or more Exemptions.
     * @param {ExemptionsDeleteManyArgs} args - Arguments to filter Exemptions to delete.
     * @example
     * // Delete a few Exemptions
     * const { count } = await prisma.exemptions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExemptionsDeleteManyArgs>(
      args?: SelectSubset<T, ExemptionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExemptionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exemptions
     * const exemptions = await prisma.exemptions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExemptionsUpdateManyArgs>(
      args: SelectSubset<T, ExemptionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Exemptions.
     * @param {ExemptionsUpsertArgs} args - Arguments to update or create a Exemptions.
     * @example
     * // Update or create a Exemptions
     * const exemptions = await prisma.exemptions.upsert({
     *   create: {
     *     // ... data to create a Exemptions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exemptions we want to update
     *   }
     * })
    **/
    upsert<T extends ExemptionsUpsertArgs>(
      args: SelectSubset<T, ExemptionsUpsertArgs>
    ): CheckSelect<T, Prisma__ExemptionsClient<Exemptions>, Prisma__ExemptionsClient<ExemptionsGetPayload<T>>>

    /**
     * Count the number of Exemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExemptionsCountArgs} args - Arguments to filter Exemptions to count.
     * @example
     * // Count the number of Exemptions
     * const count = await prisma.exemptions.count({
     *   where: {
     *     // ... the filter for the Exemptions we want to count
     *   }
     * })
    **/
    count<T extends ExemptionsCountArgs>(
      args?: Subset<T, ExemptionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExemptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExemptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExemptionsAggregateArgs>(args: Subset<T, ExemptionsAggregateArgs>): PrismaPromise<GetExemptionsAggregateType<T>>

    /**
     * Group by Exemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExemptionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExemptionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExemptionsGroupByArgs['orderBy'] }
        : { orderBy?: ExemptionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExemptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExemptionsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exemptions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExemptionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    guild<T extends GuildConfigsArgs = {}>(args?: Subset<T, GuildConfigsArgs>): CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs | null >, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Exemptions findUnique
   */
  export type ExemptionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
    /**
     * Throw an Error if a Exemptions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Exemptions to fetch.
     * 
    **/
    where: ExemptionsWhereUniqueInput
  }


  /**
   * Exemptions findFirst
   */
  export type ExemptionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
    /**
     * Throw an Error if a Exemptions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Exemptions to fetch.
     * 
    **/
    where?: ExemptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exemptions to fetch.
     * 
    **/
    orderBy?: Enumerable<ExemptionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exemptions.
     * 
    **/
    cursor?: ExemptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exemptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exemptions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exemptions.
     * 
    **/
    distinct?: Enumerable<ExemptionsScalarFieldEnum>
  }


  /**
   * Exemptions findMany
   */
  export type ExemptionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
    /**
     * Filter, which Exemptions to fetch.
     * 
    **/
    where?: ExemptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exemptions to fetch.
     * 
    **/
    orderBy?: Enumerable<ExemptionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exemptions.
     * 
    **/
    cursor?: ExemptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exemptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exemptions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ExemptionsScalarFieldEnum>
  }


  /**
   * Exemptions create
   */
  export type ExemptionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
    /**
     * The data needed to create a Exemptions.
     * 
    **/
    data: XOR<ExemptionsCreateInput, ExemptionsUncheckedCreateInput>
  }


  /**
   * Exemptions createMany
   */
  export type ExemptionsCreateManyArgs = {
    data: Enumerable<ExemptionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Exemptions update
   */
  export type ExemptionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
    /**
     * The data needed to update a Exemptions.
     * 
    **/
    data: XOR<ExemptionsUpdateInput, ExemptionsUncheckedUpdateInput>
    /**
     * Choose, which Exemptions to update.
     * 
    **/
    where: ExemptionsWhereUniqueInput
  }


  /**
   * Exemptions updateMany
   */
  export type ExemptionsUpdateManyArgs = {
    data: XOR<ExemptionsUpdateManyMutationInput, ExemptionsUncheckedUpdateManyInput>
    where?: ExemptionsWhereInput
  }


  /**
   * Exemptions upsert
   */
  export type ExemptionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
    /**
     * The filter to search for the Exemptions to update in case it exists.
     * 
    **/
    where: ExemptionsWhereUniqueInput
    /**
     * In case the Exemptions found by the `where` argument doesn't exist, create a new Exemptions with this data.
     * 
    **/
    create: XOR<ExemptionsCreateInput, ExemptionsUncheckedCreateInput>
    /**
     * In case the Exemptions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ExemptionsUpdateInput, ExemptionsUncheckedUpdateInput>
  }


  /**
   * Exemptions delete
   */
  export type ExemptionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
    /**
     * Filter which Exemptions to delete.
     * 
    **/
    where: ExemptionsWhereUniqueInput
  }


  /**
   * Exemptions deleteMany
   */
  export type ExemptionsDeleteManyArgs = {
    where?: ExemptionsWhereInput
  }


  /**
   * Exemptions without action
   */
  export type ExemptionsArgs = {
    /**
     * Select specific fields to fetch from the Exemptions
     * 
    **/
    select?: ExemptionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExemptionsInclude | null
  }



  /**
   * Model Muted
   */


  export type AggregateMuted = {
    _count: MutedCountAggregateOutputType | null
    _min: MutedMinAggregateOutputType | null
    _max: MutedMaxAggregateOutputType | null
  }

  export type MutedMinAggregateOutputType = {
    id: string | null
    guildId: string | null
  }

  export type MutedMaxAggregateOutputType = {
    id: string | null
    guildId: string | null
  }

  export type MutedCountAggregateOutputType = {
    id: number
    guildId: number
    _all: number
  }


  export type MutedMinAggregateInputType = {
    id?: true
    guildId?: true
  }

  export type MutedMaxAggregateInputType = {
    id?: true
    guildId?: true
  }

  export type MutedCountAggregateInputType = {
    id?: true
    guildId?: true
    _all?: true
  }

  export type MutedAggregateArgs = {
    /**
     * Filter which Muted to aggregate.
     * 
    **/
    where?: MutedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muteds to fetch.
     * 
    **/
    orderBy?: Enumerable<MutedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MutedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muteds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muteds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Muteds
    **/
    _count?: true | MutedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MutedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MutedMaxAggregateInputType
  }

  export type GetMutedAggregateType<T extends MutedAggregateArgs> = {
        [P in keyof T & keyof AggregateMuted]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMuted[P]>
      : GetScalarType<T[P], AggregateMuted[P]>
  }


    
    
  export type MutedGroupByArgs = {
    where?: MutedWhereInput
    orderBy?: Enumerable<MutedOrderByWithAggregationInput>
    by: Array<MutedScalarFieldEnum>
    having?: MutedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MutedCountAggregateInputType | true
    _min?: MutedMinAggregateInputType
    _max?: MutedMaxAggregateInputType
  }


  export type MutedGroupByOutputType = {
    id: string
    guildId: string
    _count: MutedCountAggregateOutputType | null
    _min: MutedMinAggregateOutputType | null
    _max: MutedMaxAggregateOutputType | null
  }

  type GetMutedGroupByPayload<T extends MutedGroupByArgs> = Promise<
    Array<
      PickArray<MutedGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof MutedGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], MutedGroupByOutputType[P]> 
            : GetScalarType<T[P], MutedGroupByOutputType[P]>
        }
      > 
    >


  export type MutedSelect = {
    id?: boolean
    guildId?: boolean
    guild?: boolean | GuildConfigsArgs
  }

  export type MutedInclude = {
    guild?: boolean | GuildConfigsArgs
  }

  export type MutedGetPayload<
    S extends boolean | null | undefined | MutedArgs,
    U = keyof S
      > = S extends true
        ? Muted
    : S extends undefined
    ? never
    : S extends MutedArgs | MutedFindManyArgs
    ?'include' extends U
    ? Muted  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'guild'
        ? GuildConfigsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Muted ?Muted [P]
  : 
          P extends 'guild'
        ? GuildConfigsGetPayload<S['select'][P]> : never
  } 
    : Muted
  : Muted


  type MutedCountArgs = Merge<
    Omit<MutedFindManyArgs, 'select' | 'include'> & {
      select?: MutedCountAggregateInputType | true
    }
  >

  export interface MutedDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Muted that matches the filter.
     * @param {MutedFindUniqueArgs} args - Arguments to find a Muted
     * @example
     * // Get one Muted
     * const muted = await prisma.muted.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MutedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MutedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Muted'> extends True ? CheckSelect<T, Prisma__MutedClient<Muted>, Prisma__MutedClient<MutedGetPayload<T>>> : CheckSelect<T, Prisma__MutedClient<Muted | null >, Prisma__MutedClient<MutedGetPayload<T> | null >>

    /**
     * Find the first Muted that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedFindFirstArgs} args - Arguments to find a Muted
     * @example
     * // Get one Muted
     * const muted = await prisma.muted.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MutedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MutedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Muted'> extends True ? CheckSelect<T, Prisma__MutedClient<Muted>, Prisma__MutedClient<MutedGetPayload<T>>> : CheckSelect<T, Prisma__MutedClient<Muted | null >, Prisma__MutedClient<MutedGetPayload<T> | null >>

    /**
     * Find zero or more Muteds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Muteds
     * const muteds = await prisma.muted.findMany()
     * 
     * // Get first 10 Muteds
     * const muteds = await prisma.muted.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mutedWithIdOnly = await prisma.muted.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MutedFindManyArgs>(
      args?: SelectSubset<T, MutedFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Muted>>, PrismaPromise<Array<MutedGetPayload<T>>>>

    /**
     * Create a Muted.
     * @param {MutedCreateArgs} args - Arguments to create a Muted.
     * @example
     * // Create one Muted
     * const Muted = await prisma.muted.create({
     *   data: {
     *     // ... data to create a Muted
     *   }
     * })
     * 
    **/
    create<T extends MutedCreateArgs>(
      args: SelectSubset<T, MutedCreateArgs>
    ): CheckSelect<T, Prisma__MutedClient<Muted>, Prisma__MutedClient<MutedGetPayload<T>>>

    /**
     * Create many Muteds.
     *     @param {MutedCreateManyArgs} args - Arguments to create many Muteds.
     *     @example
     *     // Create many Muteds
     *     const muted = await prisma.muted.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MutedCreateManyArgs>(
      args?: SelectSubset<T, MutedCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Muted.
     * @param {MutedDeleteArgs} args - Arguments to delete one Muted.
     * @example
     * // Delete one Muted
     * const Muted = await prisma.muted.delete({
     *   where: {
     *     // ... filter to delete one Muted
     *   }
     * })
     * 
    **/
    delete<T extends MutedDeleteArgs>(
      args: SelectSubset<T, MutedDeleteArgs>
    ): CheckSelect<T, Prisma__MutedClient<Muted>, Prisma__MutedClient<MutedGetPayload<T>>>

    /**
     * Update one Muted.
     * @param {MutedUpdateArgs} args - Arguments to update one Muted.
     * @example
     * // Update one Muted
     * const muted = await prisma.muted.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MutedUpdateArgs>(
      args: SelectSubset<T, MutedUpdateArgs>
    ): CheckSelect<T, Prisma__MutedClient<Muted>, Prisma__MutedClient<MutedGetPayload<T>>>

    /**
     * Delete zero or more Muteds.
     * @param {MutedDeleteManyArgs} args - Arguments to filter Muteds to delete.
     * @example
     * // Delete a few Muteds
     * const { count } = await prisma.muted.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MutedDeleteManyArgs>(
      args?: SelectSubset<T, MutedDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Muteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Muteds
     * const muted = await prisma.muted.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MutedUpdateManyArgs>(
      args: SelectSubset<T, MutedUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Muted.
     * @param {MutedUpsertArgs} args - Arguments to update or create a Muted.
     * @example
     * // Update or create a Muted
     * const muted = await prisma.muted.upsert({
     *   create: {
     *     // ... data to create a Muted
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Muted we want to update
     *   }
     * })
    **/
    upsert<T extends MutedUpsertArgs>(
      args: SelectSubset<T, MutedUpsertArgs>
    ): CheckSelect<T, Prisma__MutedClient<Muted>, Prisma__MutedClient<MutedGetPayload<T>>>

    /**
     * Count the number of Muteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedCountArgs} args - Arguments to filter Muteds to count.
     * @example
     * // Count the number of Muteds
     * const count = await prisma.muted.count({
     *   where: {
     *     // ... the filter for the Muteds we want to count
     *   }
     * })
    **/
    count<T extends MutedCountArgs>(
      args?: Subset<T, MutedCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MutedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Muted.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MutedAggregateArgs>(args: Subset<T, MutedAggregateArgs>): PrismaPromise<GetMutedAggregateType<T>>

    /**
     * Group by Muted.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MutedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MutedGroupByArgs['orderBy'] }
        : { orderBy?: MutedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MutedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMutedGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Muted.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MutedClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    guild<T extends GuildConfigsArgs = {}>(args?: Subset<T, GuildConfigsArgs>): CheckSelect<T, Prisma__GuildConfigsClient<GuildConfigs | null >, Prisma__GuildConfigsClient<GuildConfigsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Muted findUnique
   */
  export type MutedFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
    /**
     * Throw an Error if a Muted can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Muted to fetch.
     * 
    **/
    where: MutedWhereUniqueInput
  }


  /**
   * Muted findFirst
   */
  export type MutedFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
    /**
     * Throw an Error if a Muted can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Muted to fetch.
     * 
    **/
    where?: MutedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muteds to fetch.
     * 
    **/
    orderBy?: Enumerable<MutedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Muteds.
     * 
    **/
    cursor?: MutedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muteds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muteds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Muteds.
     * 
    **/
    distinct?: Enumerable<MutedScalarFieldEnum>
  }


  /**
   * Muted findMany
   */
  export type MutedFindManyArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
    /**
     * Filter, which Muteds to fetch.
     * 
    **/
    where?: MutedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muteds to fetch.
     * 
    **/
    orderBy?: Enumerable<MutedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Muteds.
     * 
    **/
    cursor?: MutedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muteds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muteds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MutedScalarFieldEnum>
  }


  /**
   * Muted create
   */
  export type MutedCreateArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
    /**
     * The data needed to create a Muted.
     * 
    **/
    data: XOR<MutedCreateInput, MutedUncheckedCreateInput>
  }


  /**
   * Muted createMany
   */
  export type MutedCreateManyArgs = {
    data: Enumerable<MutedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Muted update
   */
  export type MutedUpdateArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
    /**
     * The data needed to update a Muted.
     * 
    **/
    data: XOR<MutedUpdateInput, MutedUncheckedUpdateInput>
    /**
     * Choose, which Muted to update.
     * 
    **/
    where: MutedWhereUniqueInput
  }


  /**
   * Muted updateMany
   */
  export type MutedUpdateManyArgs = {
    data: XOR<MutedUpdateManyMutationInput, MutedUncheckedUpdateManyInput>
    where?: MutedWhereInput
  }


  /**
   * Muted upsert
   */
  export type MutedUpsertArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
    /**
     * The filter to search for the Muted to update in case it exists.
     * 
    **/
    where: MutedWhereUniqueInput
    /**
     * In case the Muted found by the `where` argument doesn't exist, create a new Muted with this data.
     * 
    **/
    create: XOR<MutedCreateInput, MutedUncheckedCreateInput>
    /**
     * In case the Muted was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MutedUpdateInput, MutedUncheckedUpdateInput>
  }


  /**
   * Muted delete
   */
  export type MutedDeleteArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
    /**
     * Filter which Muted to delete.
     * 
    **/
    where: MutedWhereUniqueInput
  }


  /**
   * Muted deleteMany
   */
  export type MutedDeleteManyArgs = {
    where?: MutedWhereInput
  }


  /**
   * Muted without action
   */
  export type MutedArgs = {
    /**
     * Select specific fields to fetch from the Muted
     * 
    **/
    select?: MutedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MutedInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DomainsScalarFieldEnum: {
    domain: 'domain',
    hits: 'hits',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DomainsScalarFieldEnum = (typeof DomainsScalarFieldEnum)[keyof typeof DomainsScalarFieldEnum]


  export const GuildConfigsScalarFieldEnum: {
    id: 'id',
    delete: 'delete',
    action: 'action',
    logChannel: 'logChannel',
    muteRole: 'muteRole',
    notify: 'notify',
    logLevel: 'logLevel'
  };

  export type GuildConfigsScalarFieldEnum = (typeof GuildConfigsScalarFieldEnum)[keyof typeof GuildConfigsScalarFieldEnum]


  export const ExemptionsScalarFieldEnum: {
    id: 'id',
    guildId: 'guildId',
    kind: 'kind'
  };

  export type ExemptionsScalarFieldEnum = (typeof ExemptionsScalarFieldEnum)[keyof typeof ExemptionsScalarFieldEnum]


  export const MutedScalarFieldEnum: {
    id: 'id',
    guildId: 'guildId'
  };

  export type MutedScalarFieldEnum = (typeof MutedScalarFieldEnum)[keyof typeof MutedScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type DomainsWhereInput = {
    AND?: Enumerable<DomainsWhereInput>
    OR?: Enumerable<DomainsWhereInput>
    NOT?: Enumerable<DomainsWhereInput>
    domain?: StringFilter | string
    hits?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type DomainsOrderByWithRelationInput = {
    domain?: SortOrder
    hits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainsWhereUniqueInput = {
    domain?: string
  }

  export type DomainsOrderByWithAggregationInput = {
    domain?: SortOrder
    hits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DomainsCountOrderByAggregateInput
    _avg?: DomainsAvgOrderByAggregateInput
    _max?: DomainsMaxOrderByAggregateInput
    _min?: DomainsMinOrderByAggregateInput
    _sum?: DomainsSumOrderByAggregateInput
  }

  export type DomainsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DomainsScalarWhereWithAggregatesInput>
    OR?: Enumerable<DomainsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DomainsScalarWhereWithAggregatesInput>
    domain?: StringWithAggregatesFilter | string
    hits?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GuildConfigsWhereInput = {
    AND?: Enumerable<GuildConfigsWhereInput>
    OR?: Enumerable<GuildConfigsWhereInput>
    NOT?: Enumerable<GuildConfigsWhereInput>
    id?: StringFilter | string
    delete?: EnumLevelFilter | Level
    action?: EnumActionKindFilter | ActionKind
    logChannel?: StringNullableFilter | string | null
    muteRole?: StringNullableFilter | string | null
    notify?: EnumLevelNullableFilter | Level | null
    logLevel?: EnumLevelNullableFilter | Level | null
    exemptions?: ExemptionsListRelationFilter
    muted?: MutedListRelationFilter
  }

  export type GuildConfigsOrderByWithRelationInput = {
    id?: SortOrder
    delete?: SortOrder
    action?: SortOrder
    logChannel?: SortOrder
    muteRole?: SortOrder
    notify?: SortOrder
    logLevel?: SortOrder
    exemptions?: ExemptionsOrderByRelationAggregateInput
    muted?: MutedOrderByRelationAggregateInput
  }

  export type GuildConfigsWhereUniqueInput = {
    id?: string
  }

  export type GuildConfigsOrderByWithAggregationInput = {
    id?: SortOrder
    delete?: SortOrder
    action?: SortOrder
    logChannel?: SortOrder
    muteRole?: SortOrder
    notify?: SortOrder
    logLevel?: SortOrder
    _count?: GuildConfigsCountOrderByAggregateInput
    _max?: GuildConfigsMaxOrderByAggregateInput
    _min?: GuildConfigsMinOrderByAggregateInput
  }

  export type GuildConfigsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GuildConfigsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GuildConfigsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GuildConfigsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    delete?: EnumLevelWithAggregatesFilter | Level
    action?: EnumActionKindWithAggregatesFilter | ActionKind
    logChannel?: StringNullableWithAggregatesFilter | string | null
    muteRole?: StringNullableWithAggregatesFilter | string | null
    notify?: EnumLevelNullableWithAggregatesFilter | Level | null
    logLevel?: EnumLevelNullableWithAggregatesFilter | Level | null
  }

  export type ExemptionsWhereInput = {
    AND?: Enumerable<ExemptionsWhereInput>
    OR?: Enumerable<ExemptionsWhereInput>
    NOT?: Enumerable<ExemptionsWhereInput>
    id?: StringFilter | string
    guildId?: StringFilter | string
    kind?: EnumExemptionKindFilter | ExemptionKind
    guild?: XOR<GuildConfigsRelationFilter, GuildConfigsWhereInput>
  }

  export type ExemptionsOrderByWithRelationInput = {
    id?: SortOrder
    guildId?: SortOrder
    kind?: SortOrder
    guild?: GuildConfigsOrderByWithRelationInput
  }

  export type ExemptionsWhereUniqueInput = {
    id_guildId?: ExemptionsIdGuildIdCompoundUniqueInput
  }

  export type ExemptionsOrderByWithAggregationInput = {
    id?: SortOrder
    guildId?: SortOrder
    kind?: SortOrder
    _count?: ExemptionsCountOrderByAggregateInput
    _max?: ExemptionsMaxOrderByAggregateInput
    _min?: ExemptionsMinOrderByAggregateInput
  }

  export type ExemptionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExemptionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExemptionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExemptionsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    guildId?: StringWithAggregatesFilter | string
    kind?: EnumExemptionKindWithAggregatesFilter | ExemptionKind
  }

  export type MutedWhereInput = {
    AND?: Enumerable<MutedWhereInput>
    OR?: Enumerable<MutedWhereInput>
    NOT?: Enumerable<MutedWhereInput>
    id?: StringFilter | string
    guildId?: StringFilter | string
    guild?: XOR<GuildConfigsRelationFilter, GuildConfigsWhereInput>
  }

  export type MutedOrderByWithRelationInput = {
    id?: SortOrder
    guildId?: SortOrder
    guild?: GuildConfigsOrderByWithRelationInput
  }

  export type MutedWhereUniqueInput = {
    id_guildId?: MutedIdGuildIdCompoundUniqueInput
  }

  export type MutedOrderByWithAggregationInput = {
    id?: SortOrder
    guildId?: SortOrder
    _count?: MutedCountOrderByAggregateInput
    _max?: MutedMaxOrderByAggregateInput
    _min?: MutedMinOrderByAggregateInput
  }

  export type MutedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MutedScalarWhereWithAggregatesInput>
    OR?: Enumerable<MutedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MutedScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    guildId?: StringWithAggregatesFilter | string
  }

  export type DomainsCreateInput = {
    domain: string
    hits?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DomainsUncheckedCreateInput = {
    domain: string
    hits?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DomainsUpdateInput = {
    domain?: StringFieldUpdateOperationsInput | string
    hits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainsUncheckedUpdateInput = {
    domain?: StringFieldUpdateOperationsInput | string
    hits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainsCreateManyInput = {
    domain: string
    hits?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DomainsUpdateManyMutationInput = {
    domain?: StringFieldUpdateOperationsInput | string
    hits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainsUncheckedUpdateManyInput = {
    domain?: StringFieldUpdateOperationsInput | string
    hits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuildConfigsCreateInput = {
    id: string
    delete?: Level
    action?: ActionKind
    logChannel?: string | null
    muteRole?: string | null
    notify?: Level | null
    logLevel?: Level | null
    exemptions?: ExemptionsCreateNestedManyWithoutGuildInput
    muted?: MutedCreateNestedManyWithoutGuildInput
  }

  export type GuildConfigsUncheckedCreateInput = {
    id: string
    delete?: Level
    action?: ActionKind
    logChannel?: string | null
    muteRole?: string | null
    notify?: Level | null
    logLevel?: Level | null
    exemptions?: ExemptionsUncheckedCreateNestedManyWithoutGuildInput
    muted?: MutedUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildConfigsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    exemptions?: ExemptionsUpdateManyWithoutGuildInput
    muted?: MutedUpdateManyWithoutGuildInput
  }

  export type GuildConfigsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    exemptions?: ExemptionsUncheckedUpdateManyWithoutGuildInput
    muted?: MutedUncheckedUpdateManyWithoutGuildInput
  }

  export type GuildConfigsCreateManyInput = {
    id: string
    delete?: Level
    action?: ActionKind
    logChannel?: string | null
    muteRole?: string | null
    notify?: Level | null
    logLevel?: Level | null
  }

  export type GuildConfigsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
  }

  export type GuildConfigsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
  }

  export type ExemptionsCreateInput = {
    id: string
    kind: ExemptionKind
    guild: GuildConfigsCreateNestedOneWithoutExemptionsInput
  }

  export type ExemptionsUncheckedCreateInput = {
    id: string
    guildId: string
    kind: ExemptionKind
  }

  export type ExemptionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumExemptionKindFieldUpdateOperationsInput | ExemptionKind
    guild?: GuildConfigsUpdateOneRequiredWithoutExemptionsInput
  }

  export type ExemptionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    kind?: EnumExemptionKindFieldUpdateOperationsInput | ExemptionKind
  }

  export type ExemptionsCreateManyInput = {
    id: string
    guildId: string
    kind: ExemptionKind
  }

  export type ExemptionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumExemptionKindFieldUpdateOperationsInput | ExemptionKind
  }

  export type ExemptionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    kind?: EnumExemptionKindFieldUpdateOperationsInput | ExemptionKind
  }

  export type MutedCreateInput = {
    id: string
    guild: GuildConfigsCreateNestedOneWithoutMutedInput
  }

  export type MutedUncheckedCreateInput = {
    id: string
    guildId: string
  }

  export type MutedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guild?: GuildConfigsUpdateOneRequiredWithoutMutedInput
  }

  export type MutedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
  }

  export type MutedCreateManyInput = {
    id: string
    guildId: string
  }

  export type MutedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type MutedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DomainsCountOrderByAggregateInput = {
    domain?: SortOrder
    hits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainsAvgOrderByAggregateInput = {
    hits?: SortOrder
  }

  export type DomainsMaxOrderByAggregateInput = {
    domain?: SortOrder
    hits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainsMinOrderByAggregateInput = {
    domain?: SortOrder
    hits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainsSumOrderByAggregateInput = {
    hits?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumLevelFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelFilter | Level
  }

  export type EnumActionKindFilter = {
    equals?: ActionKind
    in?: Enumerable<ActionKind>
    notIn?: Enumerable<ActionKind>
    not?: NestedEnumActionKindFilter | ActionKind
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumLevelNullableFilter = {
    equals?: Level | null
    in?: Enumerable<Level> | null
    notIn?: Enumerable<Level> | null
    not?: NestedEnumLevelNullableFilter | Level | null
  }

  export type ExemptionsListRelationFilter = {
    every?: ExemptionsWhereInput
    some?: ExemptionsWhereInput
    none?: ExemptionsWhereInput
  }

  export type MutedListRelationFilter = {
    every?: MutedWhereInput
    some?: MutedWhereInput
    none?: MutedWhereInput
  }

  export type ExemptionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MutedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuildConfigsCountOrderByAggregateInput = {
    id?: SortOrder
    delete?: SortOrder
    action?: SortOrder
    logChannel?: SortOrder
    muteRole?: SortOrder
    notify?: SortOrder
    logLevel?: SortOrder
  }

  export type GuildConfigsMaxOrderByAggregateInput = {
    id?: SortOrder
    delete?: SortOrder
    action?: SortOrder
    logChannel?: SortOrder
    muteRole?: SortOrder
    notify?: SortOrder
    logLevel?: SortOrder
  }

  export type GuildConfigsMinOrderByAggregateInput = {
    id?: SortOrder
    delete?: SortOrder
    action?: SortOrder
    logChannel?: SortOrder
    muteRole?: SortOrder
    notify?: SortOrder
    logLevel?: SortOrder
  }

  export type EnumLevelWithAggregatesFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelWithAggregatesFilter | Level
    _count?: NestedIntFilter
    _min?: NestedEnumLevelFilter
    _max?: NestedEnumLevelFilter
  }

  export type EnumActionKindWithAggregatesFilter = {
    equals?: ActionKind
    in?: Enumerable<ActionKind>
    notIn?: Enumerable<ActionKind>
    not?: NestedEnumActionKindWithAggregatesFilter | ActionKind
    _count?: NestedIntFilter
    _min?: NestedEnumActionKindFilter
    _max?: NestedEnumActionKindFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumLevelNullableWithAggregatesFilter = {
    equals?: Level | null
    in?: Enumerable<Level> | null
    notIn?: Enumerable<Level> | null
    not?: NestedEnumLevelNullableWithAggregatesFilter | Level | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLevelNullableFilter
    _max?: NestedEnumLevelNullableFilter
  }

  export type EnumExemptionKindFilter = {
    equals?: ExemptionKind
    in?: Enumerable<ExemptionKind>
    notIn?: Enumerable<ExemptionKind>
    not?: NestedEnumExemptionKindFilter | ExemptionKind
  }

  export type GuildConfigsRelationFilter = {
    is?: GuildConfigsWhereInput
    isNot?: GuildConfigsWhereInput
  }

  export type ExemptionsIdGuildIdCompoundUniqueInput = {
    id: string
    guildId: string
  }

  export type ExemptionsCountOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    kind?: SortOrder
  }

  export type ExemptionsMaxOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    kind?: SortOrder
  }

  export type ExemptionsMinOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    kind?: SortOrder
  }

  export type EnumExemptionKindWithAggregatesFilter = {
    equals?: ExemptionKind
    in?: Enumerable<ExemptionKind>
    notIn?: Enumerable<ExemptionKind>
    not?: NestedEnumExemptionKindWithAggregatesFilter | ExemptionKind
    _count?: NestedIntFilter
    _min?: NestedEnumExemptionKindFilter
    _max?: NestedEnumExemptionKindFilter
  }

  export type MutedIdGuildIdCompoundUniqueInput = {
    id: string
    guildId: string
  }

  export type MutedCountOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
  }

  export type MutedMaxOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
  }

  export type MutedMinOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ExemptionsCreateNestedManyWithoutGuildInput = {
    create?: XOR<Enumerable<ExemptionsCreateWithoutGuildInput>, Enumerable<ExemptionsUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<ExemptionsCreateOrConnectWithoutGuildInput>
    createMany?: ExemptionsCreateManyGuildInputEnvelope
    connect?: Enumerable<ExemptionsWhereUniqueInput>
  }

  export type MutedCreateNestedManyWithoutGuildInput = {
    create?: XOR<Enumerable<MutedCreateWithoutGuildInput>, Enumerable<MutedUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MutedCreateOrConnectWithoutGuildInput>
    createMany?: MutedCreateManyGuildInputEnvelope
    connect?: Enumerable<MutedWhereUniqueInput>
  }

  export type ExemptionsUncheckedCreateNestedManyWithoutGuildInput = {
    create?: XOR<Enumerable<ExemptionsCreateWithoutGuildInput>, Enumerable<ExemptionsUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<ExemptionsCreateOrConnectWithoutGuildInput>
    createMany?: ExemptionsCreateManyGuildInputEnvelope
    connect?: Enumerable<ExemptionsWhereUniqueInput>
  }

  export type MutedUncheckedCreateNestedManyWithoutGuildInput = {
    create?: XOR<Enumerable<MutedCreateWithoutGuildInput>, Enumerable<MutedUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MutedCreateOrConnectWithoutGuildInput>
    createMany?: MutedCreateManyGuildInputEnvelope
    connect?: Enumerable<MutedWhereUniqueInput>
  }

  export type EnumLevelFieldUpdateOperationsInput = {
    set?: Level
  }

  export type EnumActionKindFieldUpdateOperationsInput = {
    set?: ActionKind
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumLevelFieldUpdateOperationsInput = {
    set?: Level | null
  }

  export type ExemptionsUpdateManyWithoutGuildInput = {
    create?: XOR<Enumerable<ExemptionsCreateWithoutGuildInput>, Enumerable<ExemptionsUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<ExemptionsCreateOrConnectWithoutGuildInput>
    upsert?: Enumerable<ExemptionsUpsertWithWhereUniqueWithoutGuildInput>
    createMany?: ExemptionsCreateManyGuildInputEnvelope
    connect?: Enumerable<ExemptionsWhereUniqueInput>
    set?: Enumerable<ExemptionsWhereUniqueInput>
    disconnect?: Enumerable<ExemptionsWhereUniqueInput>
    delete?: Enumerable<ExemptionsWhereUniqueInput>
    update?: Enumerable<ExemptionsUpdateWithWhereUniqueWithoutGuildInput>
    updateMany?: Enumerable<ExemptionsUpdateManyWithWhereWithoutGuildInput>
    deleteMany?: Enumerable<ExemptionsScalarWhereInput>
  }

  export type MutedUpdateManyWithoutGuildInput = {
    create?: XOR<Enumerable<MutedCreateWithoutGuildInput>, Enumerable<MutedUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MutedCreateOrConnectWithoutGuildInput>
    upsert?: Enumerable<MutedUpsertWithWhereUniqueWithoutGuildInput>
    createMany?: MutedCreateManyGuildInputEnvelope
    connect?: Enumerable<MutedWhereUniqueInput>
    set?: Enumerable<MutedWhereUniqueInput>
    disconnect?: Enumerable<MutedWhereUniqueInput>
    delete?: Enumerable<MutedWhereUniqueInput>
    update?: Enumerable<MutedUpdateWithWhereUniqueWithoutGuildInput>
    updateMany?: Enumerable<MutedUpdateManyWithWhereWithoutGuildInput>
    deleteMany?: Enumerable<MutedScalarWhereInput>
  }

  export type ExemptionsUncheckedUpdateManyWithoutGuildInput = {
    create?: XOR<Enumerable<ExemptionsCreateWithoutGuildInput>, Enumerable<ExemptionsUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<ExemptionsCreateOrConnectWithoutGuildInput>
    upsert?: Enumerable<ExemptionsUpsertWithWhereUniqueWithoutGuildInput>
    createMany?: ExemptionsCreateManyGuildInputEnvelope
    connect?: Enumerable<ExemptionsWhereUniqueInput>
    set?: Enumerable<ExemptionsWhereUniqueInput>
    disconnect?: Enumerable<ExemptionsWhereUniqueInput>
    delete?: Enumerable<ExemptionsWhereUniqueInput>
    update?: Enumerable<ExemptionsUpdateWithWhereUniqueWithoutGuildInput>
    updateMany?: Enumerable<ExemptionsUpdateManyWithWhereWithoutGuildInput>
    deleteMany?: Enumerable<ExemptionsScalarWhereInput>
  }

  export type MutedUncheckedUpdateManyWithoutGuildInput = {
    create?: XOR<Enumerable<MutedCreateWithoutGuildInput>, Enumerable<MutedUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MutedCreateOrConnectWithoutGuildInput>
    upsert?: Enumerable<MutedUpsertWithWhereUniqueWithoutGuildInput>
    createMany?: MutedCreateManyGuildInputEnvelope
    connect?: Enumerable<MutedWhereUniqueInput>
    set?: Enumerable<MutedWhereUniqueInput>
    disconnect?: Enumerable<MutedWhereUniqueInput>
    delete?: Enumerable<MutedWhereUniqueInput>
    update?: Enumerable<MutedUpdateWithWhereUniqueWithoutGuildInput>
    updateMany?: Enumerable<MutedUpdateManyWithWhereWithoutGuildInput>
    deleteMany?: Enumerable<MutedScalarWhereInput>
  }

  export type GuildConfigsCreateNestedOneWithoutExemptionsInput = {
    create?: XOR<GuildConfigsCreateWithoutExemptionsInput, GuildConfigsUncheckedCreateWithoutExemptionsInput>
    connectOrCreate?: GuildConfigsCreateOrConnectWithoutExemptionsInput
    connect?: GuildConfigsWhereUniqueInput
  }

  export type EnumExemptionKindFieldUpdateOperationsInput = {
    set?: ExemptionKind
  }

  export type GuildConfigsUpdateOneRequiredWithoutExemptionsInput = {
    create?: XOR<GuildConfigsCreateWithoutExemptionsInput, GuildConfigsUncheckedCreateWithoutExemptionsInput>
    connectOrCreate?: GuildConfigsCreateOrConnectWithoutExemptionsInput
    upsert?: GuildConfigsUpsertWithoutExemptionsInput
    connect?: GuildConfigsWhereUniqueInput
    update?: XOR<GuildConfigsUpdateWithoutExemptionsInput, GuildConfigsUncheckedUpdateWithoutExemptionsInput>
  }

  export type GuildConfigsCreateNestedOneWithoutMutedInput = {
    create?: XOR<GuildConfigsCreateWithoutMutedInput, GuildConfigsUncheckedCreateWithoutMutedInput>
    connectOrCreate?: GuildConfigsCreateOrConnectWithoutMutedInput
    connect?: GuildConfigsWhereUniqueInput
  }

  export type GuildConfigsUpdateOneRequiredWithoutMutedInput = {
    create?: XOR<GuildConfigsCreateWithoutMutedInput, GuildConfigsUncheckedCreateWithoutMutedInput>
    connectOrCreate?: GuildConfigsCreateOrConnectWithoutMutedInput
    upsert?: GuildConfigsUpsertWithoutMutedInput
    connect?: GuildConfigsWhereUniqueInput
    update?: XOR<GuildConfigsUpdateWithoutMutedInput, GuildConfigsUncheckedUpdateWithoutMutedInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumLevelFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelFilter | Level
  }

  export type NestedEnumActionKindFilter = {
    equals?: ActionKind
    in?: Enumerable<ActionKind>
    notIn?: Enumerable<ActionKind>
    not?: NestedEnumActionKindFilter | ActionKind
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumLevelNullableFilter = {
    equals?: Level | null
    in?: Enumerable<Level> | null
    notIn?: Enumerable<Level> | null
    not?: NestedEnumLevelNullableFilter | Level | null
  }

  export type NestedEnumLevelWithAggregatesFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelWithAggregatesFilter | Level
    _count?: NestedIntFilter
    _min?: NestedEnumLevelFilter
    _max?: NestedEnumLevelFilter
  }

  export type NestedEnumActionKindWithAggregatesFilter = {
    equals?: ActionKind
    in?: Enumerable<ActionKind>
    notIn?: Enumerable<ActionKind>
    not?: NestedEnumActionKindWithAggregatesFilter | ActionKind
    _count?: NestedIntFilter
    _min?: NestedEnumActionKindFilter
    _max?: NestedEnumActionKindFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumLevelNullableWithAggregatesFilter = {
    equals?: Level | null
    in?: Enumerable<Level> | null
    notIn?: Enumerable<Level> | null
    not?: NestedEnumLevelNullableWithAggregatesFilter | Level | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLevelNullableFilter
    _max?: NestedEnumLevelNullableFilter
  }

  export type NestedEnumExemptionKindFilter = {
    equals?: ExemptionKind
    in?: Enumerable<ExemptionKind>
    notIn?: Enumerable<ExemptionKind>
    not?: NestedEnumExemptionKindFilter | ExemptionKind
  }

  export type NestedEnumExemptionKindWithAggregatesFilter = {
    equals?: ExemptionKind
    in?: Enumerable<ExemptionKind>
    notIn?: Enumerable<ExemptionKind>
    not?: NestedEnumExemptionKindWithAggregatesFilter | ExemptionKind
    _count?: NestedIntFilter
    _min?: NestedEnumExemptionKindFilter
    _max?: NestedEnumExemptionKindFilter
  }

  export type ExemptionsCreateWithoutGuildInput = {
    id: string
    kind: ExemptionKind
  }

  export type ExemptionsUncheckedCreateWithoutGuildInput = {
    id: string
    kind: ExemptionKind
  }

  export type ExemptionsCreateOrConnectWithoutGuildInput = {
    where: ExemptionsWhereUniqueInput
    create: XOR<ExemptionsCreateWithoutGuildInput, ExemptionsUncheckedCreateWithoutGuildInput>
  }

  export type ExemptionsCreateManyGuildInputEnvelope = {
    data: Enumerable<ExemptionsCreateManyGuildInput>
    skipDuplicates?: boolean
  }

  export type MutedCreateWithoutGuildInput = {
    id: string
  }

  export type MutedUncheckedCreateWithoutGuildInput = {
    id: string
  }

  export type MutedCreateOrConnectWithoutGuildInput = {
    where: MutedWhereUniqueInput
    create: XOR<MutedCreateWithoutGuildInput, MutedUncheckedCreateWithoutGuildInput>
  }

  export type MutedCreateManyGuildInputEnvelope = {
    data: Enumerable<MutedCreateManyGuildInput>
    skipDuplicates?: boolean
  }

  export type ExemptionsUpsertWithWhereUniqueWithoutGuildInput = {
    where: ExemptionsWhereUniqueInput
    update: XOR<ExemptionsUpdateWithoutGuildInput, ExemptionsUncheckedUpdateWithoutGuildInput>
    create: XOR<ExemptionsCreateWithoutGuildInput, ExemptionsUncheckedCreateWithoutGuildInput>
  }

  export type ExemptionsUpdateWithWhereUniqueWithoutGuildInput = {
    where: ExemptionsWhereUniqueInput
    data: XOR<ExemptionsUpdateWithoutGuildInput, ExemptionsUncheckedUpdateWithoutGuildInput>
  }

  export type ExemptionsUpdateManyWithWhereWithoutGuildInput = {
    where: ExemptionsScalarWhereInput
    data: XOR<ExemptionsUpdateManyMutationInput, ExemptionsUncheckedUpdateManyWithoutExemptionsInput>
  }

  export type ExemptionsScalarWhereInput = {
    AND?: Enumerable<ExemptionsScalarWhereInput>
    OR?: Enumerable<ExemptionsScalarWhereInput>
    NOT?: Enumerable<ExemptionsScalarWhereInput>
    id?: StringFilter | string
    guildId?: StringFilter | string
    kind?: EnumExemptionKindFilter | ExemptionKind
  }

  export type MutedUpsertWithWhereUniqueWithoutGuildInput = {
    where: MutedWhereUniqueInput
    update: XOR<MutedUpdateWithoutGuildInput, MutedUncheckedUpdateWithoutGuildInput>
    create: XOR<MutedCreateWithoutGuildInput, MutedUncheckedCreateWithoutGuildInput>
  }

  export type MutedUpdateWithWhereUniqueWithoutGuildInput = {
    where: MutedWhereUniqueInput
    data: XOR<MutedUpdateWithoutGuildInput, MutedUncheckedUpdateWithoutGuildInput>
  }

  export type MutedUpdateManyWithWhereWithoutGuildInput = {
    where: MutedScalarWhereInput
    data: XOR<MutedUpdateManyMutationInput, MutedUncheckedUpdateManyWithoutMutedInput>
  }

  export type MutedScalarWhereInput = {
    AND?: Enumerable<MutedScalarWhereInput>
    OR?: Enumerable<MutedScalarWhereInput>
    NOT?: Enumerable<MutedScalarWhereInput>
    id?: StringFilter | string
    guildId?: StringFilter | string
  }

  export type GuildConfigsCreateWithoutExemptionsInput = {
    id: string
    delete?: Level
    action?: ActionKind
    logChannel?: string | null
    muteRole?: string | null
    notify?: Level | null
    logLevel?: Level | null
    muted?: MutedCreateNestedManyWithoutGuildInput
  }

  export type GuildConfigsUncheckedCreateWithoutExemptionsInput = {
    id: string
    delete?: Level
    action?: ActionKind
    logChannel?: string | null
    muteRole?: string | null
    notify?: Level | null
    logLevel?: Level | null
    muted?: MutedUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildConfigsCreateOrConnectWithoutExemptionsInput = {
    where: GuildConfigsWhereUniqueInput
    create: XOR<GuildConfigsCreateWithoutExemptionsInput, GuildConfigsUncheckedCreateWithoutExemptionsInput>
  }

  export type GuildConfigsUpsertWithoutExemptionsInput = {
    update: XOR<GuildConfigsUpdateWithoutExemptionsInput, GuildConfigsUncheckedUpdateWithoutExemptionsInput>
    create: XOR<GuildConfigsCreateWithoutExemptionsInput, GuildConfigsUncheckedCreateWithoutExemptionsInput>
  }

  export type GuildConfigsUpdateWithoutExemptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    muted?: MutedUpdateManyWithoutGuildInput
  }

  export type GuildConfigsUncheckedUpdateWithoutExemptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    muted?: MutedUncheckedUpdateManyWithoutGuildInput
  }

  export type GuildConfigsCreateWithoutMutedInput = {
    id: string
    delete?: Level
    action?: ActionKind
    logChannel?: string | null
    muteRole?: string | null
    notify?: Level | null
    logLevel?: Level | null
    exemptions?: ExemptionsCreateNestedManyWithoutGuildInput
  }

  export type GuildConfigsUncheckedCreateWithoutMutedInput = {
    id: string
    delete?: Level
    action?: ActionKind
    logChannel?: string | null
    muteRole?: string | null
    notify?: Level | null
    logLevel?: Level | null
    exemptions?: ExemptionsUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildConfigsCreateOrConnectWithoutMutedInput = {
    where: GuildConfigsWhereUniqueInput
    create: XOR<GuildConfigsCreateWithoutMutedInput, GuildConfigsUncheckedCreateWithoutMutedInput>
  }

  export type GuildConfigsUpsertWithoutMutedInput = {
    update: XOR<GuildConfigsUpdateWithoutMutedInput, GuildConfigsUncheckedUpdateWithoutMutedInput>
    create: XOR<GuildConfigsCreateWithoutMutedInput, GuildConfigsUncheckedCreateWithoutMutedInput>
  }

  export type GuildConfigsUpdateWithoutMutedInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    exemptions?: ExemptionsUpdateManyWithoutGuildInput
  }

  export type GuildConfigsUncheckedUpdateWithoutMutedInput = {
    id?: StringFieldUpdateOperationsInput | string
    delete?: EnumLevelFieldUpdateOperationsInput | Level
    action?: EnumActionKindFieldUpdateOperationsInput | ActionKind
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    muteRole?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    logLevel?: NullableEnumLevelFieldUpdateOperationsInput | Level | null
    exemptions?: ExemptionsUncheckedUpdateManyWithoutGuildInput
  }

  export type ExemptionsCreateManyGuildInput = {
    id: string
    kind: ExemptionKind
  }

  export type MutedCreateManyGuildInput = {
    id: string
  }

  export type ExemptionsUpdateWithoutGuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumExemptionKindFieldUpdateOperationsInput | ExemptionKind
  }

  export type ExemptionsUncheckedUpdateWithoutGuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumExemptionKindFieldUpdateOperationsInput | ExemptionKind
  }

  export type ExemptionsUncheckedUpdateManyWithoutExemptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumExemptionKindFieldUpdateOperationsInput | ExemptionKind
  }

  export type MutedUpdateWithoutGuildInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type MutedUncheckedUpdateWithoutGuildInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type MutedUncheckedUpdateManyWithoutMutedInput = {
    id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.1.1
 * Query Engine version: c22652b7e418506fab23052d569b85d3aec4883f
 */
Prisma.prismaVersion = {
  client: "3.1.1",
  engine: "c22652b7e418506fab23052d569b85d3aec4883f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.DomainsScalarFieldEnum = makeEnum({
  domain: 'domain',
  hits: 'hits',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.GuildConfigsScalarFieldEnum = makeEnum({
  id: 'id',
  delete: 'delete',
  action: 'action',
  logChannel: 'logChannel',
  muteRole: 'muteRole',
  notify: 'notify',
  logLevel: 'logLevel'
});

exports.Prisma.ExemptionsScalarFieldEnum = makeEnum({
  id: 'id',
  guildId: 'guildId',
  kind: 'kind'
});

exports.Prisma.MutedScalarFieldEnum = makeEnum({
  id: 'id',
  guildId: 'guildId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Level = makeEnum({
  ALWAYS: 'ALWAYS',
  YES: 'YES',
  NO: 'NO'
});

exports.ActionKind = makeEnum({
  BAN: 'BAN',
  SOFTBAN: 'SOFTBAN',
  KICK: 'KICK',
  MUTE: 'MUTE',
  STICKYMUTE: 'STICKYMUTE',
  NONE: 'NONE'
});

exports.ExemptionKind = makeEnum({
  USER: 'USER',
  ROLE: 'ROLE',
  CHANNEL: 'CHANNEL'
});

exports.Prisma.ModelName = makeEnum({
  Domains: 'Domains',
  GuildConfigs: 'GuildConfigs',
  Exemptions: 'Exemptions',
  Muted: 'Muted'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
